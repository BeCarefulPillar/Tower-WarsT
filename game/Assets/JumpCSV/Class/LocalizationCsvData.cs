// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace JumpCSV {
    using System;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.Serialization.Formatters.Binary;
    using UnityEngine;
    
    
    [Serializable()]
    public struct LocalizationRecord {
        
        public Int32      _ID;
        public String     text;
        public Int32      _VALUE;
        
	}
    
    public class LocalizationCsvData {
        
        public static Dictionary<int, string> RecordIdValue = new Dictionary<int, string>();
        
        public static Dictionary<string, int> IdRecordValue = new Dictionary<string, int>();
        
        public static Dictionary<int, LocalizationRecord> Data = new Dictionary<int, LocalizationRecord>();
        public static LocalizationRecord GetRecord(int id)
        { 
    if(Data.ContainsKey(id)) {
            return Data[id];
        }
        else {
            throw new Exception("Can not find record by id " + id);
        }
    }
        public static void Serialize(string filename) {
        BinaryFormatter formatter = new BinaryFormatter();
        Stream stream = new FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None);
        formatter.Serialize(stream, Data);
        stream.Flush();
        stream.Close();
    }
        public static void Deserialize(string filename, bool isAssetBundle = false) {
        TextAsset textAsset = null;
        if(isAssetBundle && AssetBundleMgr.ContainsFile(filename, "bytes")) {
            textAsset = AssetBundleMgr.Load(filename, "bytes") as TextAsset;
        }
        else {
            textAsset = Resources.Load(filename) as TextAsset;
        }
        RecordIdValue.Clear();
        IdRecordValue.Clear();
        Init();
        Init2();
        BinaryFormatter formatter = new BinaryFormatter();
        Stream stream = new MemoryStream(textAsset.bytes);
        Data = formatter.Deserialize(stream) as Dictionary<int, LocalizationRecord>;
            stream.Close();
    }
        public static void Init() {

             RecordIdValue.Add(1,"LOC_SAY_HELLO_WORLD");
             RecordIdValue.Add(2,"LOC_SUN_KANG");
             RecordIdValue.Add(3,"LOC_SUN_KANG_DES");
             RecordIdValue.Add(4,"LOC_XIANG_WEI");
             RecordIdValue.Add(5,"LOC_XIANG_WEI_DES");
}
        public static void Init2() {

             IdRecordValue.Add("LOC_SAY_HELLO_WORLD",1);
             IdRecordValue.Add("LOC_SUN_KANG",2);
             IdRecordValue.Add("LOC_SUN_KANG_DES",3);
             IdRecordValue.Add("LOC_XIANG_WEI",4);
             IdRecordValue.Add("LOC_XIANG_WEI_DES",5);
}
        public static int mHashCode = -1145800513;
        public static int _ID(int recordId) {
            return GetRecord(recordId)._ID;
        }
        
        public static string text(int recordId) {
            return GetRecord(recordId).text;
        }
        
        public static int _VALUE(int recordId) {
            return GetRecord(recordId)._VALUE;
        }
        
        public static void Read(string fileName) {
            Data.Clear();
            RecordIdValue.Clear();
            IdRecordValue.Clear();
            Init();
            Init2();
            JumpCSV.CsvSpreadSheet sheet = new JumpCSV.CsvSpreadSheet(fileName, true);
            for (int i = 0; (i < sheet.Records.Count); i = (i + 1)) {
                LocalizationRecord record = new LocalizationRecord();
                record._ID = CsvValueConverter.ReadValueDicValue(sheet, i, "_VALUE");
                record.text = CsvValueConverter.ReadValueString(sheet, i, "text");
                record._VALUE = CsvValueConverter.ReadValueDicValue(sheet, i, "_VALUE");
                int keyValue = sheet.GetRecord(i).KeyValue;
                Data.Add(keyValue, record);;
            }
        }
    }
}
